# -*- coding: utf-8 -*-
"""Bienvenue dans Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

#Packages
import pandas as pd #Pour explorer les données
import numpy as np #Pour l'algèbre linéaire
import matplotlib.pyplot as plt #ce package sert à visualiser les données
import plotly.express as px
import plotly.graph_objects as go
from ipywidgets import interact,widgets
import folium

#Collecte de données
confirme_df=pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
deces_df=pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
retabli_df=pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')
etat_df=pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv')

print(confirme_df.shape)
print(deces_df.shape)
print(retabli_df.shape)
print(etat_df.shape)

etat_df.head(10)

etat_df[etat_df['Country_Region']=='China']

etat_df.columns

#Afficher les statistiques au niveau du monde
global_data=etat_df.copy().drop(['Country_Region','Last_Update', 'Lat', 'Long_', 'Active', 'Incident_Rate', 'People_Tested',
       'People_Hospitalized', 'Mortality_Rate', 'UID', 'ISO3'],axis=1)
global_synthese=pd.DataFrame(global_data.sum()).transpose()
global_synthese

#Visualiser les payes les plus touchés
fig=go.FigureWidget(layout=go.Layout())
def highlight_col(x):
  r='background-color:red'
  y='background-color:yellow'
  g='background-color:green'
  df1=pd.DataFrame('',index=x.index,columns=x.columns)
  df1.iloc[:,4]=y
  df1.iloc[:,5]=r
  df1.iloc[:,6]=g

  return df1

def show_cases(n):
  n=int(n)
  return etat_df.sort_values('Confirmed',ascending=False).head(n).style.apply(highlight_col,axis=None)

interact(show_cases,n='10')

ipywLayout=widgets.Layout(border='solid 2px green')
ipywLayout.display ='none'
widgets.VBox([fig],layout=ipywLayout)

etat_class_df=etat_df.sort_values('Confirmed',ascending=False)
etat_class_df.columns

px.bar(
    etat_class_df.head(10),
    x='Country_Region',
    y='Confirmed',
  title='Les pays les plus impactés par COVID-19 (cas confirmé)',
  color_discrete_sequence=['yellow'],
  height=500,
  width=800
)

px.bar(
    etat_class_df.head(10),
    x='Country_Region',
    y='Deaths',
  title='Les pays les plus impactés par COVID-19 (Decès)',
  color_discrete_sequence=['red'],
  height=500,
  width=800
)

px.bar(
    etat_class_df.head(10),
    x='Country_Region',
    y='Recovered',
  title='Les pays les plus impactés par COVID-19 (Recovred)',
  color_discrete_sequence=['Green'],
  height=500,
  width=800
)

#Visualiser les données sur une carte
m=folium.Map(location=[31.7917,-7.0926],zoom_start=6, max_zoom=12, min_zoom=2)
for i in range(0,len(confirme_df)):
  folium.Circle(
      location=[confirme_df.iloc[i]['Lat'],confirme_df.iloc[i]['Long']],
      fill=True,
      radius=(int((np.log(confirme_df.iloc[i,-1]+1,00001)))+0.2)*50000,
      color='red',
      fill_color='indigo',
      

  ).add_to(m)
m

confirme_df.columns

#Visualiser la situation au Maroc
conf_mar=confirme_df[confirme_df['Country/Region']=='Morocco']
dec_mar=deces_df[deces_df['Country/Region']=='Morocco']
retab_mar=retabli_df[retabli_df['Country/Region']=='Morocco']

confi_mar=confirme_df[confirme_df['Country/Region']=='Morocco']
dec_mar=deces_df[deces_df['Country/Region']=='Morocco']
retab_mar=retabli_df[retabli_df['Country/Region']=='Morocco']

confi_mar.columns

#Préparation des données (MAROC)
confi_mar=confi_mar.copy().drop(['Province/State', 'Country/Region', 'Lat', 'Long'],axis=1).sum()
dec_mar=dec_mar.copy().drop(['Province/State', 'Country/Region', 'Lat', 'Long'],axis=1).sum()
retab_mar=retab_mar.copy().drop(['Province/State', 'Country/Region', 'Lat', 'Long'],axis=1).sum()

#Dessin de la courbe
fig,ax=plt.subplots(figsize=(18,8))
ax.plot(confi_mar.index,confi_mar.values,label='Confirmé')
ax.plot(dec_mar.index,dec_mar.values,label='Decès')
ax.plot(retab_mar.index,retab_mar.values,label='Retabli')

plt.xticks(rotation='vertical')
ax.set(xlabel='Date',ylabel='Nombre de Cas',title='Situation au Maroc')
plt.legend()